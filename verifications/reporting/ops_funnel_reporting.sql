DROP TABLE IF EXISTS DOCUMENT_DATA;
CREATE TEMP TABLE DOCUMENT_DATA AS
SELECT DISTINCT
       L.ID AS LOAN_ID
     , L.UNIFIED_ID
     , L.CREATED_AT AS LOAN_CREATED_TS
     , CONVERT_TIMEZONE('America/Chicago', L.CREATED_AT)::DATE AS APPLICATION_DATE
     , LEAD.MONTHS_SINCE_ENROLLMENT
     , L.UPDATED_AT AS LOAN_UPDATED_TS
     , LAS.NAME AS LOAN_STATUS
     , NEXT_STATUS.NEW_STATUS AS NEXT_LOAN_STATUS
     , NEXT_STATUS.UPDATED_AT AS NEXT_LOAN_STATUS_UPDATED_TS
     , DATEDIFF('DAY', L.CREATED_AT, NEXT_LOAN_STATUS_UPDATED_TS) -
       iff(LOAN_CREATED_TS::TIME > NEXT_LOAN_STATUS_UPDATED_TS::TIME, 1, 0) AS DAYS_TO_NEXT_STATUS
     , T.ID AS TODO_ID
     , T.TYPE AS TODO_TYPE
     , T.STATUS AS TODO_STATUS

     , CASE
           WHEN LOAN_STATUS IN ('APPROVED', 'ONBOARDED', 'INITIAL_TIL_SUBMIT') THEN 1
           WHEN D.NAME IS NOT NULL AND T.STATUS = 'approved' THEN 1
           ELSE 0
           END AS TODO_DOC_APPROVED_FLAG
     , CASE
           WHEN TODO_DOC_APPROVED_FLAG = 1 THEN 1
           WHEN D.NAME IS NOT NULL THEN 1
           ELSE 0
           END AS TODO_DOC_SUBMITTED_FLAG
     , CASE
           WHEN D.NAME IS NULL AND T.STATUS = 'approved' THEN 0
           WHEN D.NAME IS NULL AND T.STATUS <> 'approved' THEN 1
           ELSE 1
           END AS TODO_DOC_NEEDED_FLAG

     , CASE
           WHEN TODO_DOC_APPROVED_FLAG = 1 THEN COALESCE(T.UPDATED_AT, NEXT_STATUS.UPDATED_AT, L.UPDATED_AT)
           END AS APPROVE_TS

     , MIN(COALESCE(D.CREATED_AT, APPROVE_TS)) OVER (PARTITION BY L.ID, T.ID) AS FIRST_SUBMIT_TS
     , DATEDIFF('DAY', L.CREATED_AT, APPROVE_TS) -
       iff(LOAN_CREATED_TS::TIME > APPROVE_TS::TIME, 1, 0) AS DAYS_TO_APPROVE
     , DATEDIFF('DAY', L.CREATED_AT, FIRST_SUBMIT_TS) -
       iff(LOAN_CREATED_TS::TIME > FIRST_SUBMIT_TS::TIME, 1, 0) AS DAYS_TO_SUBMIT

FROM ABOVE_PUBLIC.LOANS L
     LEFT JOIN ABOVE_PUBLIC.TODOS T
               ON T.LOAN_ID = L.ID
     LEFT JOIN ABOVE_PUBLIC.TODO_DOCS D ON T.ID = D.TODO_ID
     LEFT JOIN ABOVE_PUBLIC.LOAN_APP_STATUSES LAS ON L.LOAN_APP_STATUS_ID = LAS.ID
     LEFT JOIN (
               SELECT *
               FROM ABOVE_PUBLIC.LOAN_STATUS_HISTORY
               WHERE OLD_STATUS = 'IPL_PENDING'
                   QUALIFY RANK() OVER (PARTITION BY LOAN_ID ORDER BY UPDATED_AT DESC) = 1
               ) NEXT_STATUS ON L.ID = NEXT_STATUS.LOAN_ID
     LEFT JOIN (
               SELECT *
               FROM ABOVE_PUBLIC.LEADS
                   QUALIFY RANK() OVER (PARTITION BY PROGRAM_ID ORDER BY CREATED_AT DESC) = 1
               ) LEAD ON LEAD.PROGRAM_ID = L.PROGRAM_ID
WHERE L.CREATED_AT >= '2021-11-01'
  AND T.TYPE <> 'payment_adherence'
  AND L.PRODUCT_TYPE = 'IPL'
  AND TODO_DOC_NEEDED_FLAG = 1
;

-- SELECT *
-- FROM DOCUMENT_DATA;

DROP TABLE IF EXISTS DOC_GROUPING_CLASSIFICATION;
CREATE TEMP TABLE DOC_GROUPING_CLASSIFICATION AS
SELECT DISTINCT
       D.LOAN_ID
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'bank') THEN 1
           ELSE 0
           END AS DOC_NEEDED_BANK_STATEMENT
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'identity') THEN 1
           ELSE 0
           END AS DOC_NEEDED_IDENTITY
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'residence') THEN 1
           ELSE 0
           END AS DOC_NEEDED_RESIDENCE
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'ofac') THEN 1
           ELSE 0
           END AS DOC_NEEDED_OFAC
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'fraud_alert') THEN 1
           ELSE 0
           END AS DOC_NEEDED_FRAUD_ALERT
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'nsf') THEN 1
           ELSE 0
           END AS DOC_NEEDED_NSF
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'fraud') THEN 1
           ELSE 0
           END AS DOC_NEEDED_FRAUD
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'consumer_statement')
               THEN 1
           ELSE 0
           END AS DOC_NEEDED_CONSUMER_STATEMENT
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'active_duty') THEN 1
           ELSE 0
           END AS DOC_NEEDED_ACTIVE_DUTY
     , CASE
           WHEN exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_TYPE = 'income') THEN 1
           ELSE 0
           END AS DOC_NEEDED_INCOME
     , CASE
           WHEN exists(SELECT 1
                       FROM DOCUMENT_DATA
                       WHERE LOAN_ID = D.LOAN_ID
                         AND TODO_TYPE NOT IN ('income', 'bank', 'identity', 'residence')) THEN 1
           ELSE 0
           END AS DOC_NEEDED_OTHER
     , CASE
           WHEN DOC_NEEDED_OTHER = 1 THEN 'Other'
           WHEN least(DOC_NEEDED_INCOME) = 1
               AND greatest(DOC_NEEDED_IDENTITY, DOC_NEEDED_RESIDENCE) = 0
               THEN 'Income'
           WHEN least(DOC_NEEDED_IDENTITY) = 1
               AND greatest(DOC_NEEDED_RESIDENCE, DOC_NEEDED_INCOME) = 0
               THEN 'Identity'
           WHEN least(DOC_NEEDED_RESIDENCE) = 1
               AND greatest(DOC_NEEDED_IDENTITY, DOC_NEEDED_INCOME) = 0
               THEN 'Residence'
           WHEN least(DOC_NEEDED_INCOME, DOC_NEEDED_IDENTITY) = 1
               AND greatest(DOC_NEEDED_RESIDENCE) = 0
               THEN 'Income + Identity'
           WHEN least(DOC_NEEDED_INCOME, DOC_NEEDED_RESIDENCE) = 1
               AND greatest(DOC_NEEDED_IDENTITY) = 0
               THEN 'Income + Residence'
           WHEN least(DOC_NEEDED_IDENTITY, DOC_NEEDED_RESIDENCE) = 1
               AND greatest(DOC_NEEDED_INCOME) = 0
               THEN 'Identity + Residence'
           WHEN least(DOC_NEEDED_INCOME, DOC_NEEDED_IDENTITY, DOC_NEEDED_RESIDENCE) = 1
               THEN 'Income + Identity + Residence'
           WHEN greatest(DOC_NEEDED_IDENTITY, DOC_NEEDED_RESIDENCE, DOC_NEEDED_INCOME) = 0
               THEN 'Fastest Path (Bank only)'
           END AS DOC_VERIFICATION_GROUP_NEW
FROM DOCUMENT_DATA AS D
;

DROP TABLE IF EXISTS APPLICATION_DATA;
CREATE TEMP TABLE APPLICATION_DATA AS
SELECT DISTINCT
       D.LOAN_ID
     , UNIFIED_ID
     , APPLICATION_DATE
     , MONTHS_SINCE_ENROLLMENT
     , DOC_VERIFICATION_GROUP_NEW
     , LOAN_STATUS
     , DOC_NEEDED_BANK_STATEMENT
     , DOC_NEEDED_IDENTITY
     , DOC_NEEDED_RESIDENCE
     , DOC_NEEDED_INCOME
     , DOC_NEEDED_OTHER
     , CASE
           WHEN LOAN_STATUS IN ('APPROVED', 'ONBOARDED', 'INITIAL_TIL_SUBMIT') THEN 1
           WHEN NEXT_LOAN_STATUS IN ('IPL_APPROVED', 'IPL_INITIAL_TIL_SUBMIT', 'IPL_ONBOARDED') THEN 1
           ELSE 0
           END AS APPROVED_FLAG
     , CASE
           WHEN APPROVED_FLAG = 1 THEN 1
           WHEN LOAN_STATUS IN ('BACK_END_DECLINED') OR NEXT_LOAN_STATUS IN ('IPL_BACK_END_DECLINED') THEN 1
           WHEN NEXT_LOAN_STATUS IN ('IPL_EXPIRED', 'IPL_PENDING', 'IPL_WITHDRAWN')
               THEN 0
           ELSE 0
           END AS DECISION_FLAG
     , CASE WHEN DECISION_FLAG = 1 THEN DAYS_TO_NEXT_STATUS END AS DAYS_TO_DECISION
     , CASE WHEN APPROVED_FLAG = 1 THEN DAYS_TO_NEXT_STATUS END AS DAYS_TO_APPROVAL
     , CASE
           WHEN DECISION_FLAG = 1 OR
                NOT exists(SELECT 1 FROM DOCUMENT_DATA WHERE LOAN_ID = D.LOAN_ID AND TODO_DOC_SUBMITTED_FLAG = 0)
               THEN max(DAYS_TO_SUBMIT) OVER (PARTITION BY D.LOAN_ID)
           END AS DAYS_TO_ALL_DOCS_SUBMIT
FROM DOCUMENT_DATA D
     LEFT JOIN DOC_GROUPING_CLASSIFICATION DGC ON D.LOAN_ID = DGC.LOAN_ID
;

DROP TABLE IF EXISTS DAYS;
CREATE TEMP TABLE DAYS AS
SELECT row_number() OVER (ORDER BY seq4()) - 1 AS DAYS
FROM TABLE (generator(ROWCOUNT => 29))
;

-- Total application funnel by day
SELECT APPLICATION_DATE - dayofweek(APPLICATION_DATE - 6) AS APPLICATION_WEEK
     , APPLICATION_DATE
     , UNIFIED_ID
     , DOC_VERIFICATION_GROUP_NEW AS DOC_VERIFICATION_GROUP
     , MONTHS_SINCE_ENROLLMENT
     , CASE
           WHEN MONTHS_SINCE_ENROLLMENT < 6 THEN '1) T3-5'
           WHEN MONTHS_SINCE_ENROLLMENT BETWEEN 6 AND 11 THEN '2) T6-11'
           WHEN MONTHS_SINCE_ENROLLMENT >= 12 THEN '3) T12+'
           END AS AGE_GROUP
     , LOAN_STATUS
     , DOC_NEEDED_BANK_STATEMENT
     , DOC_NEEDED_IDENTITY
     , DOC_NEEDED_RESIDENCE
     , DOC_NEEDED_INCOME
     , DOC_NEEDED_OTHER
     , DAYS_TO_ALL_DOCS_SUBMIT
     , DAYS_TO_DECISION
     , DAYS_TO_APPROVAL

     , D.DAYS
     , CASE
           WHEN APPLICATION_DATE + D.DAYS > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_ALL_DOCS_SUBMIT <= D.DAYS THEN 1
           ELSE 0
           END AS ALL_DOCS_SUBMIT_FLG
     , CASE
           WHEN APPLICATION_DATE + D.DAYS > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_DECISION <= D.DAYS THEN 1
           ELSE 0
           END AS DECISIONED_FLG
     , CASE
           WHEN APPLICATION_DATE + D.DAYS > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_APPROVAL <= D.DAYS THEN 1
           ELSE 0
           END AS APPROVED_FLG
     , IFF(APPLICATION_DATE + D.DAYS <= CURRENT_DATE, 1, 0) AS IS_SEASONED
FROM APPLICATION_DATA
     CROSS JOIN DAYS D
;

-- Ops status sync output
SELECT UNIFIED_ID
     , APPLICATION_DATE - dayofweek(APPLICATION_DATE - 6) AS APPLICATION_WEEK
     , APPLICATION_DATE
     , CURRENT_DATE - APPLICATION_DATE AS DAYS_SINCE_APPLICATION
     , MONTHS_SINCE_ENROLLMENT
     , CASE
           WHEN MONTHS_SINCE_ENROLLMENT < 6 THEN '1) T3-5'
           WHEN MONTHS_SINCE_ENROLLMENT BETWEEN 6 AND 11 THEN '2) T6-11'
           WHEN MONTHS_SINCE_ENROLLMENT >= 12 THEN '3) T12+'
           END AS AGE_BUCKET
     , DAYS_TO_ALL_DOCS_SUBMIT
     , DAYS_TO_DECISION
     , DAYS_TO_APPROVAL
     , CASE
           WHEN APPLICATION_DATE + 7 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_ALL_DOCS_SUBMIT <= 7 THEN 1
           ELSE 0
           END AS DOC_SUBMITTED_7D
     , CASE
           WHEN APPLICATION_DATE + 14 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_ALL_DOCS_SUBMIT <= 14 THEN 1
           ELSE 0
           END AS DOC_SUBMITTED_14D
     , CASE
           WHEN APPLICATION_DATE + 21 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_ALL_DOCS_SUBMIT <= 21 THEN 1
           ELSE 0
           END AS DOC_SUBMITTED_21D
     , CASE
           WHEN APPLICATION_DATE + 28 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_ALL_DOCS_SUBMIT <= 28 THEN 1
           ELSE 0
           END AS DOC_SUBMITTED_28D
     , CASE
           WHEN APPLICATION_DATE + 7 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_DECISION <= 7 THEN 1
           ELSE 0
           END AS DECISIONED_7D
     , CASE
           WHEN APPLICATION_DATE + 14 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_DECISION <= 14 THEN 1
           ELSE 0
           END AS DECISIONED_14D
     , CASE
           WHEN APPLICATION_DATE + 21 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_DECISION <= 21 THEN 1
           ELSE 0
           END AS DECISIONED_21D
     , CASE
           WHEN APPLICATION_DATE + 28 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_DECISION <= 28 THEN 1
           ELSE 0
           END AS DECISIONED_28D
     , CASE
           WHEN APPLICATION_DATE + 7 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_APPROVAL <= 7 THEN 1
           ELSE 0
           END AS APPROVED_7D
     , CASE
           WHEN APPLICATION_DATE + 14 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_APPROVAL <= 14 THEN 1
           ELSE 0
           END AS APPROVED_14D
     , CASE
           WHEN APPLICATION_DATE + 21 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_APPROVAL <= 21 THEN 1
           ELSE 0
           END AS APPROVED_21D
     , CASE
           WHEN APPLICATION_DATE + 28 > CURRENT_DATE THEN NULL
           WHEN DAYS_TO_APPROVAL <= 28 THEN 1
           ELSE 0
           END AS APPROVED_28D
     , iff(APPLICATION_WEEK BETWEEN current_date - 34 AND current_date - 7, 1, 0) AS INCLUDE_REPORTING
FROM APPLICATION_DATA
ORDER BY 2 DESC, 3 DESC, 1
;